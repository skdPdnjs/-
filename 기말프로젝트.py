# -*- coding: utf-8 -*-
"""기말프로젝트.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rsz-5QngVqtYt-GSu2jgevOB9TwWAhDC

# 2023년 서울 자치구 사고 빈도 분석

**서울 자치구별 최근 2023년 사고 건수**
"""

# 라이브러리 불러오기
import pandas as pd
import folium

df=pd.read_excel('/content/서울구별사고빈도.xls', header=1)
print(df.head())
print(df.columns)

#데이터 전처리 과정

# 전국, 서울 행 제거 후 열이름 재정의
df = df[~df['지자체'].isin(['전국', '서울'])]
df = df.rename(columns={'지자체': '자치구'})

#타입 변환
df['2023년'] = df['2023년'].str.replace(',', '').astype(float)

# NaN값 제거
df = df.dropna(subset=['2023년'])

# 데이터 값 확인
print("최소값:", df['2023년'].min(), "최대값:", df['2023년'].max())

s_map = folium.Map(location=[37.559984, 126.9753071], zoom_start=12)
s_geo = 'https://raw.githubusercontent.com/southkorea/seoul-maps/master/kostat/2013/json/seoul_municipalities_geo_simple.json'

# Choropleth 맵 추가
folium.Choropleth(
    geo_data=s_geo,
    data=df,
    columns=['자치구', '2023년'],
    key_on='feature.properties.name',
    fill_color='YlOrRd',
    fill_opacity=0.7,
    line_opacity=0.3,
    threshold_scale=[500, 1000, 2000, 3000, 4000, 5000],
    legend_name='2023년 사고 건수'
).add_to(s_map)

# 지도 표시
s_map.save("서울시 자치구 2023년 사고 건수")
s_map

"""**사고 건수 상위 5개 구의 연도별 추세 분석**

"""

# 단계 1: 폰트 설치
import matplotlib.font_manager as fm
import matplotlib.pyplot as plt
!apt-get -qq -y install fonts-nanum > /dev/null
#fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'

#font = fm.FontProperties(fname=fontpath, size=9)

#fm._rebuild()


fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'}) # 폰트 설

# 단계 2: 런타임 재시작
import os
os.kill(os.getpid(), 9)

# 단계 3: 한글 폰트 설정
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.font_manager as fm

# 마이너스 표시 문제
mpl.rcParams['axes.unicode_minus'] = False

# 한글 폰트 설정
fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'}) # 폰트 설

df=pd.read_excel('/content/서울구별사고빈도.xls', header=1)
df = df.rename(columns={'지자체': '자치구'})
df2 = df[~df['자치구'].isin(['전국', '서울'])].copy()

# 쉼표 제거 및 숫자형 변환
for col in ['2019년', '2020년', '2021년', '2022년', '2023년']:
    df2[col] = pd.to_numeric(df2[col].astype(str).str.replace(',', ''))

# 상위 5개 구
top5 = df2.sort_values('2023년', ascending=False).head(5)

#
df_long = top5.melt(
    id_vars=['자치구'],
    value_vars=['2019년', '2020년', '2021년', '2022년', '2023년'],
    var_name='연도',
    value_name='사고건수'
)

# 그래프 생성
plt.figure(figsize=(12, 6))
sns.lineplot(data=df_long, x='연도', y='사고건수', hue='자치구', marker='o')
plt.title('사고 건수 상위 5개 구의 연도별 추세')
plt.xlabel('연도')
plt.ylabel('사고 건수')
plt.grid(True)

plt.savefig("서울시 자치구 상위 5개 연도별 추세")
plt.show()

"""# 선형 회귀를 활용한 2024년 교통사고 건수 예측"""

!pip install matplotlib pandas scikit-learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

df = pd.read_csv('/content/데이터예측.csv',  header=1)
print(df.head())

# 사고건수 데이터 추출 + 전처리
accident_data = df[df['기준년도'] == '사고[건]'].iloc[:, 1:]  # '사고[건]' 행만 선택
accident_data = accident_data.applymap(lambda x: str(x).replace(',', '') if pd.notnull(x) else x).astype(float)  # 숫자로 변환
accident_data = accident_data.T                               # 월별 데이터를 행으로 변경
accident_data.columns = ['accidents']
accident_data.index = pd.date_range(start="2019-01", periods=len(accident_data), freq='M')  # 월별 날짜 생성

# 선형 회귀 데이터 준비하기
X = np.arange(len(accident_data)).reshape(-1, 1)  # 월을 숫자로 변환
y = accident_data['accidents'].values

# 선형 회귀 모델 학습
model = LinearRegression()
model.fit(X, y)

# 2024년 데이터 예측
future_X = np.arange(len(accident_data), len(accident_data) + 12).reshape(-1, 1)  # 2024년 월에 해당하는 숫자
future_y = model.predict(future_X)
future_dates = pd.date_range(start="2024-01", periods=12, freq='M')
forecast_df = pd.DataFrame(future_y, index=future_dates, columns=['accidents'])

# 기존 데이터와 예측 데이터 병합
combined_data = pd.concat([accident_data, forecast_df])

# 데이터 시각화
plt.figure(figsize=(12, 6))
plt.plot(accident_data['accidents'], label="과거 데이터(2019-2023)", color="blue")
plt.plot(forecast_df['accidents'], label="2024 예측", linestyle="--", color="orange")
plt.title("월별 교통사고 건수 그래프 (2019-2024)")
plt.xlabel("날짜")
plt.ylabel("사고건수")
plt.legend()
plt.grid(True)
plt.show()

# 예측 데이터 출력
print("2024년 예측 데이터:")
print(forecast_df)

plt.savefig("2024 사고건수 예측 그래프.png", format="png")

"""# OECD 국가별 교통사고

**2019년 OECD 국가별 인구 10만명당 사망자수**
"""

import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px


# 데이터 로드
df = pd.read_excel('/content/OECD국가별사고.xlsx', engine='openpyxl')
print(df.head())
print(df.columns)

"""연도: 인구수 (천명)  
연도.1: 자동차 등록 대수 (천대)  
연도.2: 사고 건수  
연도.3: 사망자 수  
연도.4: 인구 10만 명당 사망자 수  
연도.5: 자동차 1만 대당 사망자 수  
연도.6: 자동차 1만 대당 사망자 순위
"""

# 필요한 열만 선택 및 이름 변경
columns_of_interest = ['국가', '2019', '2019.4']  # '2019.4'가 인구 10만 명당 사망자수
df_a = df[columns_of_interest]
df_a.columns = ['국가', '인구(천명)', '인구10만명당사망자수']

# 문자열을 숫자로 변환
df_a['인구10만명당사망자수'] = pd.to_numeric(df_a['인구10만명당사망자수'], errors='coerce')
df_a = df_a.dropna()  # NaN값 제거

# ISO Alpha-3 코드 매핑
iso_mapping = {
    "호주": "AUS",
    "독일": "DEU",
    "그리스": "GRC",
    "헝가리": "HUN",
    "아이슬란드": "ISL",
    "아일랜드": "IRL",
    "이탈리아": "ITA",
    "일본": "JPN",
    "룩셈부르크": "LUX",
    "멕시코": "MEX",
    "네덜란드": "NLD",
    "오스트리아": "AUT",
    "뉴질랜드": "NZL",
    "노르웨이": "NOR",
    "폴란드": "POL",
    "포르투갈": "PRT",
    "슬로바키아": "SVK",
    "슬로베니아": "SVN",
    "대한민국": "KOR",
    "스페인": "ESP",
    "스웨덴": "SWE",
    "스위스": "CHE",
    "벨기에": "BEL",
    "튀르키예": "TUR",
    "영국": "GBR",
    "미국": "USA",
    "에스토니아": "EST",
    "이스라엘": "ISR",
    "라트비아": "LVA",
    "리투아니아": "LTU",
    "콜롬비아": "COL",
    "코스타리카": "CRI",
    "캐나다": "CAN",
    "칠레": "CHL",
    "체코": "CZE",
    "덴마크": "DNK",
    "핀란드": "FIN",
    "프랑스": "FRA"
}
df_a['iso_alpha'] = df_a['국가'].map(iso_mapping)


# Choropleth Map 생성
trace = go.Choropleth(
    locations=df_a['iso_alpha'],         # ISO Alpha-3 코드
    z=df_a['인구10만명당사망자수'],      # 색상으로 표현할 값
    colorscale='Reds',                   # 색상 스케일
    colorbar_title='사망률 (10만명당)',  # 색상바 제목
    text=df_a['국가'],                   # 국가 이름 표시
    hoverinfo='text+z'                   # 텍스트 및 값 표시
)
data = [trace]

layout = go.Layout(
    title='2019년 OECD 국가별 인구 10만명당 사망자수',
    geo=dict(
        projection_type='equirectangular',  # 지구 투영 방식
        showframe=False,                    # 지도 프레임 제거
        showcoastlines=True                 # 해안선 표시
    )
)

fig = go.Figure(data=data, layout=layout)
fig.show()

fig.write_html("2019년 OECD 국가별 인구 10만명당 사망자수.html")

"""**OECD 국가별 2015년~2019년 사망자 수**"""

# 필요한 열만 선택 및 이름 변경
df_selected = ['국가', '2015.3', '2016.3', '2017.3', '2018.3', '2019.3']
df_a = df[df_selected]
df_a.columns = ['국가', '2015', '2016', '2017', '2018', '2019']

# 긴 형태로 변환
df_long = pd.melt(df_a, id_vars=['국가'], var_name='연도', value_name='사망자수')

# 문자열을 숫자로 변환
df_long['사망자수'] = pd.to_numeric(df_long['사망자수'], errors='coerce')

# NaN값 제거
df_long = df_long.dropna(subset=['사망자수'])

# ISO 3166 표준 국가 코드 매핑
iso_mapping = {
    "호주": "AUS",
    "독일": "DEU",
    "그리스": "GRC",
    "헝가리": "HUN",
    "아이슬란드": "ISL",
    "아일랜드": "IRL",
    "이탈리아": "ITA",
    "일본": "JPN",
    "룩셈부르크": "LUX",
    "멕시코": "MEX",
    "네덜란드": "NLD",
    "오스트리아": "AUT",
    "뉴질랜드": "NZL",
    "노르웨이": "NOR",
    "폴란드": "POL",
    "포르투갈": "PRT",
    "슬로바키아": "SVK",
    "슬로베니아": "SVN",
    "대한민국": "KOR",
    "스페인": "ESP",
    "스웨덴": "SWE",
    "스위스": "CHE",
    "벨기에": "BEL",
    "튀르키예": "TUR",
    "영국": "GBR",
    "미국": "USA",
    "에스토니아": "EST",
    "이스라엘": "ISR",
    "라트비아": "LVA",
    "리투아니아": "LTU",
    "콜롬비아": "COL",
    "코스타리카": "CRI",
    "캐나다": "CAN",
    "칠레": "CHL",
    "체코": "CZE",
    "덴마크": "DNK",
    "핀란드": "FIN",
    "프랑스": "FRA"
}

df_long['iso_alpha'] = df_long['국가'].map(iso_mapping)

# Plotly Scatter Geo Map 생성
fig = px.scatter_geo(
    df_long,
    locations="iso_alpha",  # ISO Alpha-3 코드
    size="사망자수",  # 점 크기
    color="사망자수",  # 점 색상
    hover_name="국가",
    animation_frame="연도",
    projection="natural earth"
)

fig.update_layout(
    title="OECD 국가별 사망자 수(2015~2019)",
    geo_scope="world"  # 세계 지도 설정
)
fig.show()
fig.write_html("OECD 국가별 사망자 수(2015~2019).html")

"""**OECD 국가별 자동차 1만 대당 사망자 순위 변동 (2015~2019)**"""

import pandas as pd
import plotly.express as px

# 데이터 로드
df = pd.read_excel('/content/OECD국가별사고.xlsx', engine='openpyxl')

# 필요한 열만 선택 및 이름 변경
df_selected = ['국가', '2015.5', '2016.5', '2017.5', '2018.5', '2019.5']  # 순위 열 선택
df_a = df[df_selected]
df_a.columns = ['국가', '2015', '2016', '2017', '2018', '2019']

# 긴 형태로 변환
df_long = pd.melt(df_a, id_vars=['국가'], var_name='연도', value_name='순위')

# 문자열을 숫자로 변환
df_long['순위'] = pd.to_numeric(df_long['순위'], errors='coerce')

# NaN값 제거
df_long = df_long.dropna(subset=['순위'])

# Bar Chart Race 생성
fig = px.bar(
    df_long.sort_values(by=['연도', '순위']),
    x='순위',
    y='국가',
    color='국가',
    animation_frame='연도',
    orientation='h',
    title='자동차 1만 대당 사망자 순위 변동 (2015~2019)',
    labels={'순위': '자동차1만대당사망자수', '국가': '국가'}
)

fig.update_layout(yaxis={'categoryorder': 'total ascending'})
fig.show()
fig.write_html("자동차 1만 대당 사망자 순위 변동 (2015~2019).html")

"""# 운전자 교통법규 위반 사고 건수 상위 5개"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('/content/교통법규위반사고.csv')

print(df.head())
print(df.columns)

# 사고 데이터만 추출
accident_data = df[df['구분'] == '사고[건]'].iloc[:, 1:]  # 숫자 데이터만 추출

# 쉼표 제거 및 숫자형 변환
accident_data = accident_data.replace(',', '', regex=True).astype(float)

# 합계 계산 및 상위 5개 추출
sorted_data = accident_data.iloc[0].sort_values(ascending=False)
top5 = sorted_data.head(5)

# 시각화
plt.figure(figsize=(8, 6))
colors = ['steelblue', 'darkorange', 'green', 'purple', 'red']
plt.pie(top5.values, labels=top5.index, autopct='%1.1f%%', colors=colors, startangle=90)
plt.title('2023년 교통법규 위반 사고 상위 5개 유형')

plt.savefig("교통법규위반 상위5.png")
plt.show()

"""# 2023년도 월별 교통사고 시각화"""

import pandas as pd
import plotly.express as px

df = pd.read_csv('/content/도로교통공단_월별 교통사고 통계_2023.csv', encoding='cp949')

print(df.head())
print(df.columns)

fig = px.bar(df, x='발생월', y='사고건수',
             color='발생월',
             color_continuous_scale=px.colors.diverging.Spectral,
             title='2023년 월별 사고 건수')

# 그래프 레이아웃 조정
fig.update_layout(
    width=800,
    height=500,
    xaxis_title="발생월",
    yaxis_title="사고건수",
    coloraxis_showscale=False
)

fig.write_html("2023년 월별 사고건수.html")
fig.show()

fig = plt.figure(figsize=(20, 10))

# 서브플롯 1: 월별 사고건수 막대 그래프
ax1 = fig.add_subplot(1, 3, 1)
sns.barplot(data=df, x='발생월', y='사고건수', ax=ax1)
ax1.set_title("월별 사고 건수", fontsize=16)
ax1.set_xlabel("월", fontsize=12)
ax1.set_ylabel("사고 건수", fontsize=12)

# 서브플롯 2: 경상자수와 중상자 수 선 그래프
ax2 = fig.add_subplot(1, 3, 2)
sns.lineplot(data=df, x='발생월', y='경상자수', label='경상자수', marker='o', ax=ax2, color='steelblue')
sns.lineplot(data=df, x='발생월', y='중상자수', label='중상자수', marker='s', ax=ax2, color='darkorange')
ax2.set_title("월별 경상자 수와 중상자 수 추이", fontsize=16)
ax2.set_xlabel("월", fontsize=12)
ax2.set_ylabel("건수", fontsize=12)
ax2.legend(loc='upper left')

# 서브플롯 3: 월별 부상 신고자수 카운트 플롯
ax3 = fig.add_subplot(1, 3, 3)
sns.barplot(data=df, x='발생월', y='부상신고자수', ax=ax3, palette="coolwarm")
ax3.set_title("월별 부상 신고자 수", fontsize=16)
ax3.set_xlabel("월", fontsize=12)
ax3.set_ylabel("부상 신고자 수", fontsize=12)

plt.savefig("월별 자료 시각화.png")
plt.tight_layout()
plt.show()